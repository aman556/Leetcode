Runtime: 720 ms, faster than 14.61% of C++ online submissions for Find Elements in a Contaminated Binary Tree.
Memory Usage: 19.6 MB, less than 94.01% of C++ online submissions for Find Elements in a Contaminated Binary Tree.
class FindElements {
    TreeNode* root1;
public:
    void fix(TreeNode* root,int x){
        if(!root)
            return;
        if(root->left){
            root->left->val=2*x+1;
            fix(root->left,root->left->val);
        }
        if(root->right){
            root->right->val=2*x+2;
            fix(root->right,root->right->val);
        }
        
    }
    FindElements(TreeNode* root) {
        root1=root;
        root->val=0;
        fix(root,0);
    }
    bool fin(TreeNode* root,int x){
        if(!root)
            return 0;
        if(root->val==x)
            return 1;
        if(fin(root->left,x))
            return 1;
        if(fin(root->right,x))
            return 1;
        return 0;
    }
    bool find(int target) {
        return fin(root1,target);
    }
};
Runtime: 32 ms, faster than 86.95% of C++ online submissions for Find Elements in a Contaminated Binary Tree.
Memory Usage: 22.2 MB, less than 61.32% of C++ online submissions for Find Elements in a Contaminated Binary Tree.
class FindElements {
    TreeNode* root1;
    map<int,int> m;
public:
    void fix(TreeNode* root,int x){
        if(!root)
            return;
        if(root->left){
            root->left->val=2*x+1;
            m[ root->left->val]=1;
            fix(root->left,root->left->val);
        }
        if(root->right){
            root->right->val=2*x+2;
            m[ root->right->val]=1;
            fix(root->right,root->right->val);
        }
        
    }
    FindElements(TreeNode* root) {
        root1=root;
        m[0]=1;
        root->val=0;
        fix(root,0);
    }
    bool fin(TreeNode* root,int x){
        if(!root)
            return 0;
        if(root->val==x)
            return 1;
        if(fin(root->left,x))
            return 1;
        if(fin(root->right,x))
            return 1;
        return 0;
    }
    bool find(int target) {
        return m[target];
    }
};
