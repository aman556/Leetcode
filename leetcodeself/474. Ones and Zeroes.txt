Runtime: 300 ms, faster than 52.18% of C++ online submissions for Ones and Zeroes.
Memory Usage: 35.4 MB, less than 40.63% of C++ online submissions for Ones and Zeroes.
class Solution {
    int dp[601][101][101],data[601][2];
public:
    int dpp(vector<string>& strs,int i,int m, int n){
        if(i>=strs.size()||(n==0&&m==0))
            return 0;
        
        
        if(dp[i][m][n]!=-1)
            return dp[i][m][n];
        
        
           if(m>=data[i][0]&&n>=data[i][1]){
        return dp[i][m][n]=max(dpp(strs,i+1,m-data[i][0],n-data[i][1])+1,dpp(strs,i+1,m,n));
           }
        return dp[i][m][n]=dpp(strs,i+1,m,n);
        
    }
    int findMaxForm(vector<string>& strs, int m, int n) {
        for(int i=0;i<strs.size();i++){
            for(int j=0;j<strs[i].size();j++){
                if(strs[i][j]=='0')
                    data[i][0]++;
                else
                    data[i][1]++;
            }
        }
        memset(dp,-1,sizeof(dp));
        return dpp(strs,0,m,n);
    }
};